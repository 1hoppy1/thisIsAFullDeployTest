{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/ListItem/index.js","components/List/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Profile.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","twitchUserName","dispatch","useDispatch","list","useSelector","state","className","to","url","playing","muted","width","height","class","onClick","itemInList","find","listItem","type","purchaseQuantity","parseInt","product","rel","disabled","p","QUERY_ALL_USERS","gql","QUERY_USER","ProductList","useQuery","loading","userName","data","users","filter","user","map","key","firstName","lastName","ListItem","List","toggleList","useEffect","a","products","length","getList","listOpen","role","aria-label","Home","Detail","id","useParams","useState","currentUser","setCurrentUser","forEach","then","indexedUsers","name","description","src","spinner","alt","Jumbotron","children","style","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","Auth","handleChange","target","value","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","Nav","loggedIn","href","logout","useStyles","makeStyles","theme","root","margin","spacing","Profile","userData","initialState","reducers","action","newState","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6030b2a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('small-show', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('list', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\n// import { useQuery } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\n// import { pluralize } from \"../../utils/helpers\";\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_LIST, UPDATE_LIST_QUANTITY, REMOVE_FROM_LIST } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReactPlayer from \"react-player\";\n\n\nfunction ProductItem(item) {\n  const {\n    twitchUserName,\n    _id,\n  } = item;\n\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { list } = state;\n\nconst addToList = () => {\n  const itemInList = list.find((listItem) => listItem._id === _id)\n  if (itemInList) {\n    dispatch({\n      type: UPDATE_LIST_QUANTITY,\n      _id: _id,\n      purchaseQuantity: parseInt(itemInList.purchaseQuantity) + 1\n    });\n    idbPromise('list', 'put', {\n      ...itemInList,\n      purchaseQuantity: parseInt(itemInList.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_LIST,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n    idbPromise('list', 'put', { ...item, purchaseQuantity: 1 });\n  }\n};\n\nconst removeFromList = () => {\n  dispatch({\n    type: REMOVE_FROM_LIST,\n    _id: item._id\n  });\n\n  // upon removal from list, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n  idbPromise('list', 'delete', { ...item });\n};\n \n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n      <div>\n      <ReactPlayer\n        url={`https://www.twitch.tv/${twitchUserName}`}\n        playing = {false}\n        muted = {true}\n        width = {\"410px\"}\n        height = {\"220px\"}\n      />\n    </div>\n        <p>{twitchUserName}</p>\n      </Link>\n\n      <div className=\"button_cont\">\n              <button class=\"example_ab\" onClick={addToList} rel=\"nofollow noopener\">Add to Watch List</button>\n              <button \n              disabled={!list.find(p => p._id === item._id)}\n              onClick={removeFromList}\n              class=\"example_ab\" \n              rel=\"nofollow noopener\">Remove From Watch List\n              </button>\n              </div>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const ADD_TO_LIST = 'ADD_TO_LIST';\nexport const ADD_MULTIPLE_TO_LIST = 'ADD_MULTIPLE_TO_LIST';\nexport const REMOVE_FROM_LIST = 'REMOVE_FROM_LIST';\nexport const UPDATE_LIST_QUANTITY = 'UPDATE_LIST_QUANTITY';\nexport const CLEAR_LIST = 'CLEAR_LIST';\nexport const TOGGLE_LIST = 'TOGGLE_LIST';","import gql from 'graphql-tag';\n\nexport const QUERY_ALL_USERS = gql`\n  query {\n    users {\n      _id\n      firstName\n      lastName\n      twitchUserName\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    twitchUserName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_GET_NON_APPROVED_USERS = gql`\n  query {\n    users(adminApproved: false, admin: false) {\n      _id\n      firstName\n      lastName\n      twitchUserName\n      adminApproved\n    }\n  }\n`; ","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport ProductItem from \"../ProductItem\";\n// import UserList from \"../UserList\";\n// import { QUERY_PRODUCTS } from \"../../utils/queries\";\n// import spinner from \"../../assets/spinner.gif\";\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { QUERY_ALL_USERS } from \"../../utils/queries\";\n// import { idbPromise } from \"../../utils/helpers\";\n// import { useDispatch, useSelector } from \"react-redux\";\n\nfunction ProductList() {\n  // const dispatch = useDispatch();\n  // const state = useSelector((state) => state);\n  // const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const {loading, data:userName} = useQuery(QUERY_ALL_USERS)\n  \n\n  // useEffect(() => {\n  //   if (data) {\n  //     dispatch({\n  //       type: UPDATE_PRODUCTS,\n  //       products: data.products,\n  //     });\n      \n  //     data.products.forEach((product) => {\n  //       idbPromise(\"products\", \"put\", product);\n  //     });\n  //     // add else if to check if `loading` is undefined in `useQuery()` Hook\n  //   } else if (!loading) {\n  //     // since we're offline, get all of the data from the `products` store\n  //     idbPromise(\"products\", \"get\").then((products) => {\n  //       // use retrieved data to set global state for offline browsing\n  //       dispatch({\n  //         type: UPDATE_PRODUCTS,\n  //         products: products,\n  //       });\n  //     });\n  //   }\n  // }, [data, loading, dispatch]);\n  \n  \n  function filterUsers() {\n    return userName?.users.filter(\n      (user) => user.twitchUserName\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Streamers:</h2>\n      {!loading ? (\n        <div className=\"video-row\">\n          {filterUsers().map((users) => (\n            <ProductItem\n              key={users._id}\n              _id={users._id}\n              // image={product.image}\n              twitchUserName={users.twitchUserName}\n              firstName={users.firstName}\n              lastName={users.lastName}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>No streamers are currently active!</h3>\n      )}\n      {/* {loading ? <img src={spinner} alt=\"loading\" /> : null} */}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst ListItem = ({ item }) => {\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <Link to={`/products/${item._id}`}>\n                    <p>{item.twitchUserName}</p>\n                </Link>\n\n            </div>\n        </div>\n    );\n}\n\nexport default ListItem;","import React, { useEffect } from \"react\";\nimport ListItem from '../ListItem';\nimport './style.css';\nimport { TOGGLE_LIST, ADD_MULTIPLE_TO_LIST } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst List = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  \n\n  useEffect(() => {\n    async function getList() {\n      const list = await idbPromise('list', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_LIST, products: [...list] });\n    };\n\n    if (!state.list.length) {\n      getList();\n    }\n  }, [state.list.length, dispatch]);\n\n  function toggleList() {\n    dispatch({ type: TOGGLE_LIST });\n  }\n\n  if (!state.listOpen) {\n    return (\n      <div className=\"list-closed\" onClick={toggleList}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">💾</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"list\">\n      <div className=\"close\" onClick={toggleList}><span\n          role=\"img\"\n          aria-label=\"close\">❌Close</span></div>\n      <h2>Saved Streamers</h2>\n      {state.list.length ? (\n        <div>\n          {state.list.map(item => (\n            <ListItem key={item._id} item={item} />\n          ))}\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n      </span>\n      You haven't added anyone to your list yet!\n          </h3>\n        )}\n    </div>\n\n  );\n};\n\nexport default List;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\n\nimport List from '../components/List';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n  <ProductList />\n  <List />\n</div>\n  );\n};\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_ALL_USERS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  REMOVE_FROM_LIST,\n  UPDATE_LIST_QUANTITY,\n  ADD_TO_LIST,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport List from '../components/List';\nimport { idbPromise } from \"../utils/helpers\";\nimport ReactPlayer from \"react-player\";\n\n\nfunction Detail() {\n\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { id } = useParams();\n\n  const [currentUser, setCurrentUser] = useState({})\n\n  const { loading, data } = useQuery(QUERY_ALL_USERS);\n\n  const { users, list } = state;\n  const _id = currentUser._id\n  const item = currentUser\n  console.log(list)\n\n\n\n  const addToList = () => {\n    const itemInList = list.find((listItem) => listItem._id === currentUser._id)\n    if (itemInList) {\n      dispatch({\n        type: UPDATE_LIST_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInList.purchaseQuantity) + 1\n      });\n      idbPromise('list', 'put', {\n        ...itemInList,\n        purchaseQuantity: parseInt(itemInList.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_LIST,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('list', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n  \n\n  const removeFromList = () => {\n    dispatch({\n      type: REMOVE_FROM_LIST,\n      _id: currentUser._id\n    });\n  \n    // upon removal from list, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('list', 'delete', { ...currentUser });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (data?.users.length) {\n      setCurrentUser(data?.users.find(user => user._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        users: data?.users\n      });\n  \n      data.users.forEach((user) => {\n        idbPromise('users', 'put', user);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('users', 'get').then((indexedUsers) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          users: indexedUsers\n        });\n      });\n    }\n  }, [users, data, loading, dispatch, id]);\n\n\n  return (\n    <>\n      {currentUser ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Streamers\n          </Link>\n          <div className = \"detail-video video-row\">\n            <div>\n          <ReactPlayer\n        url={`https://www.twitch.tv/${currentUser.twitchUserName}`}\n        playing = {false}\n        muted = {true}\n        width = {\"750px\"}\n        height = {\"400px\"}\n      />\n      </div>\n      </div>\n\n          <h2>{currentUser.name}</h2>\n\n          <p>\n            {currentUser.description}\n          </p>\n\n          <p>\n            <strong>Twitch Streamer:</strong>\n            {currentUser.twitchUserName}\n            {\" \"}\n            <div className=\"button_cont\">\n              <button class=\"example_a\" onClick={addToList} rel=\"nofollow noopener\">Add to Watch List</button>\n              <button \n              disabled={!list.find(p => p._id === currentUser._id)}\n              onClick={removeFromList}\n              class=\"example_a\" \n              rel=\"nofollow noopener\">Remove From Watch List\n              </button>\n              </div>\n          </p>\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <List />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $userName: String!, $twitchUserName: String, $email: String!, $password: String!)\n  {\n    addUser(firstName: $firstName, lastName: $lastName, userName: $userName, twitchUserName: $twitchUserName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '', firstName: '', lastName: '', userName: '', twitchUserName: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password, firstName: formState.firstName, lastName: formState.lastName, userName: formState.userName, twitchUserName: formState.twitchUserName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup (* indicated required field) </h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name*:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name*:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"userName\">Username*:</label>\n          <input\n            placeholder=\"Username\"\n            name=\"userName\"\n            type=\"userName\"\n            id=\"userName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"twitchUserName\">Twitch Username:</label>\n          <input\n            placeholder=\"Twitch Username\"\n            name=\"twitchUserName\"\n            type=\"twitchUserName\"\n            id=\"twitchUserName\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email*:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password*:</label>\n          <input\n            placeholder=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n          <li className=\"mx-1\">\n            <a href=\"/profile\">\n              Profile\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">Signup</Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">Login</Link>\n          </li>\n          {/* <li className=\"mx-1\">\n            <Link to=\"/admin\">\n            Admin\n            </Link>\n          </li> */}\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🎮</span>\n          Small Show\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from \"react-router-dom\";\nimport {QUERY_USER} from \"../utils/queries\";\nimport { useQuery } from '@apollo/react-hooks';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\nfunction Profile() {\n  const classes = useStyles();\n  const { data: userData } = useQuery(QUERY_USER);\n  const user = userData?.user || {};\n  useEffect(()=> {\n    console.log(user)\n  })\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/\">\n        ← Go to Home\n      </Link>\n\n      <h2>Profile Page</h2>\n      {/* <form onSubmit={handleFormSubmit}> */}\n        <div className=\"flex-row\">\n          <p>\n            <u>First Name:</u> {user.firstName}\n          </p>\n        </div>\n        <div className=\"flex-row\">\n          <p>\n            <u>Last Name:</u> {user.lastName}\n          </p>\n        </div>\n        <div className=\"flex-row\">\n        <p>\n          <u>Twitch Username:</u> {user.twitchUserName}\n        </p>\n        </div>\n        <div className=\"flex-row\">\n          <p>**More features coming soon!**</p>\n        </div>\n    </div>\n  )\n}\nexport default Profile","import {\n    UPDATE_PRODUCTS,\n    ADD_TO_LIST,\n    ADD_MULTIPLE_TO_LIST,\n    REMOVE_FROM_LIST,\n    UPDATE_LIST_QUANTITY,\n    CLEAR_LIST,\n    TOGGLE_LIST\n} from './actions';\n\nconst initialState = {\n    products: [],\n    list: [],\n    listOpen: false\n};\n\nexport const reducers = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n\n        case ADD_TO_LIST:\n            return {\n                ...state,\n                listOpen: true,\n                list: [...state.list, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_LIST:\n            return {\n                ...state,\n                list: [...state.list, ...action.products],\n            };\n\n        case REMOVE_FROM_LIST:\n            let newState = state.list.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                listOpen: newState.length > 0,\n                list: newState\n            };\n\n        case UPDATE_LIST_QUANTITY:\n            return {\n                ...state,\n                listOpen: true,\n                list: state.list.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_LIST:\n            return {\n                ...state,\n                listOpen: false,\n                list: []\n            };\n\n        case TOGGLE_LIST:\n            return {\n                ...state,\n                listOpen: !state.listOpen\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default reducers;","import { createStore } from 'redux';\nimport reducers from './reducers'\n\nexport default createStore(reducers);","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Profile from \"./pages/Profile\";\nimport { Provider } from 'react-redux';\nimport store from \"./utils/store\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/profile\" component={Profile} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}